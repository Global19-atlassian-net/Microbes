class Achievement{constructor(ui,name,blurb,code){this.ui=ui;this.name=name;this.blurb=blurb;this.code=code;this.done=!1}
check(){if(this.done){return!1}
var result=this.code();if(result){this.done=!0;this.addToQ()}
return result}
addToQ(){this.ui.achievementQ.push(this)}};class Entity{constructor(ui){this.ui=ui;this.color=[255,0,0];var p=this.randompos();this.x=p[0];this.y=p[1];this.fullhealth=2000
this.health=this.fullhealth;this.size=2;this.angle=0}
randompos(nearx=null,neary=null,near=0){if(nearx!==null){var x=this.getRandomInt(nearx-near,nearx+near)}else{var x=Math.floor(Math.random()*this.ui.canvas.width)}
if(neary!==null){var y=this.getRandomInt(neary-near,neary+near)}else{var y=Math.floor(Math.random()*this.ui.canvas.height)}
return[x,y]}
draw(){}
random(max,min=0,pow=1){return Math.round(Math.pow(Math.random(),pow)*(max-min)+min)}
getRandomInt(min,max){min=Math.ceil(min);max=Math.floor(max);return Math.floor(Math.random()*(max-min))+min}
line(x0,y0,x1,y1){var dx=Math.abs(x1-x0);var dy=Math.abs(y1-y0);var sx=(x0<x1)?1:-1;var sy=(y0<y1)?1:-1;var err=dx-dy;var x=null;var y=null;var path=[]
for(;;){path.push([x0,y0]);if((x0==x1)&&(y0==y1))break
var e2=2*err;if(e2>-dy){err-=dy;x0+=sx}
if(e2<dx){err+=dx;y0+=sy}}
return path}
convertColor(color,opacity=1){return"hsla("+color[0]+","+color[1]+"%,"+color[2]+"%,"+opacity+")"}
rotate(step){var old=this.angle
var newangle=this.angle+step;if(newangle<0){newangle=Math.floor(newangle)}else{newangle=Math.ceil(newangle)}
this.angle=this.positiveAngle(newangle)}
distanceTo(e){var a=this.x-e.x;var b=this.y-e.y;var csqrt=Math.pow(a,2)+Math.pow(b,2);var c=Math.pow(csqrt,1/2);return c}
positiveAngle(angle){while(angle>360){angle=angle-360}
while(angle<0){angle=angle+360}
return angle}
tick(){this.health-=1;if(this.health<=0){return!1}
return!0}};class Food extends Entity{constructor(ui){super(ui);this.ui.checkAchievements()
this.color=[255,255,255];this.size=2
var randomMicrobe=this.ui.microbes[Math.floor(Math.random()*this.ui.microbes.length)];if(randomMicrobe){var p=this.randompos(randomMicrobe.x,randomMicrobe.y,randomMicrobe.searchradius)}else{var p=this.randompos()}
this.x=p[0];this.y=p[1]}
draw(){this.ui.ctx.setLineDash([])
this.ui.ctx.beginPath();this.ui.ctx.fillStyle=this.convertColor(this.color);this.ui.ctx.ellipse(this.x,this.y,this.size,this.size,this.angle*Math.PI/180,0,2*Math.PI);this.ui.ctx.fill();super.draw()}
randompos(nearx=null,neary=null,near=0){var p=super.randompos(nearx,neary,near);var x=p[0];var y=p[1]
if(x<0){x=0}
if(x>=this.ui.canvas.width){x=this.ui.canvas.width-1}
if(y>=this.ui.canvas.height){y=this.ui.canvas.height-1}
if(y<0){y=0}
return[x,y]}};class Microbe extends Entity{constructor(x=null,y=null){super(x,y);this.target=null;this.targetangle=300;this.path=[];this.minsize=2
this.size=4;this.maxsize=5;this.speed=10
this.fullhealth=3000;this.health=this.fullhealth;this.wait=0;this.searchradius=100;this.dying=null;this.generation=0;this.mutatechance=1
this.mutaterange=3
this.mutations=0;this.dyinglength=100;this.traveled=0;this.traveledlast=0;this.rotatebreak=10;this.defaultcolors=[[0,100,50],[120,100,50],[240,100,50],[60,100,50],];this.maxh=360;this.minh=0;this.suph=10;this.maxs=100;this.mins=25;this.sups=10;this.maxl=70;this.minl=30;this.supl=10;this.getRandomColor()}
mutate(){this.x+=this.size;this.generation+=1;this.fullhealth=this.mutateInt(this.fullhealth);this.maxsize=this.mutateInt(this.maxsize);this.minsize=this.mutateInt(this.minsize,2);this.speed=this.mutateInt(this.speed);this.mutatechance=this.mutateInt(this.mutatechance);this.mutaterange=this.mutateInt(this.mutaterange);this.rotatebreak=this.mutateInt(this.rotatebreak);this.searchradius=this.mutateInt(this.searchradius);this.color=this.mutateColor(this.color)}
mutateColor(color){return[this.mutateInt(color[0],this.minh,this.maxh,this.suph,!0),this.mutateInt(color[1],this.mins,this.maxs,this.sups),this.mutateInt(color[2],this.minl,this.maxl,this.supl),]}
mutateInt(value,min=1,max=100000000000,speedup=1,circular=!1){var chance=this.mutatechance;var range=this.mutaterange*speedup;if(this.random(1,0,chance)){this.mutations++;var reach=this.random(range,0-range,chance)
value+=reach;if(circular){while(value>max){value=value-max}
while(value<min){value=value+max}}else{if(value<min){value=min;this.fullhealth-=reach}
if(value>max){value=max;this.fullhealth-=reach}}}
return value}
getRandomColor(){this.color=this.defaultcolors[Math.floor(Math.random()*this.defaultcolors.length)]}
draw(){if(this.ui.debug){if(this.target&&this.path.length>2){this.ui.ctx.strokeStyle="lime";this.ui.ctx.lineWidth=1;this.ui.ctx.beginPath();this.ui.ctx.moveTo(this.path[0][0],this.path[0][1]);this.ui.ctx.lineTo(this.path[this.path.length-1][0],this.path[this.path.length-1][1]);this.ui.ctx.stroke()}}
this.ui.ctx.setLineDash([])
this.ui.ctx.beginPath();this.ui.ctx.lineWidth=1;this.ui.ctx.strokeStyle=this.convertColor(this.color);this.ui.ctx.ellipse(this.x,this.y,this.size,this.size*1.6,this.angle*Math.PI/180,0,2*Math.PI);this.ui.ctx.stroke();this.ui.ctx.lineWidth=3;this.ui.ctx.strokeStyle=this.convertColor(this.color,0.5);this.ui.ctx.ellipse(this.x,this.y,this.size+1,this.size*1.6+1,this.angle*Math.PI/180,0,2*Math.PI);this.ui.ctx.stroke();this.ui.ctx.strokeStyle=this.convertColor(this.color,0.2);this.ui.ctx.ellipse(this.x,this.y,this.size+2,this.size*1.6+2,this.angle*Math.PI/180,0,2*Math.PI);this.ui.ctx.stroke();this.ui.ctx.fillStyle="yellow";var p=this.rotatepoint(this.x,this.y-this.size,this.angle,this.x,this.y)
this.ui.ctx.fillRect(p[0],p[1],1,1);super.draw()}
rotatepoint(x,y,angle,cx,cy){var radians=(Math.PI/180)*angle,cos=Math.cos(radians),sin=Math.sin(radians),nx=(cos*(x-cx))-(sin*(y-cy))+cx,ny=(cos*(y-cy))+(sin*(x-cx))+cy;return[nx,ny]}
searchpath(){this.path=this.line(this.x,this.y,this.target.x,this.target.y);this.targetangle=Math.atan2(this.y-this.target.y,this.x-this.target.x)*180/Math.PI;this.targetangle=Math.round(this.positiveAngle(this.targetangle-90))}
travel(){if(!this.path.length){this.searchpath()}
if(this.targetangle!=this.angle){if((this.targetangle-this.angle+360)%360<180){this.rotate(this.speed/this.rotatebreak);if((this.targetangle-this.angle+360)%360>180){this.angle=this.targetangle}}else{this.rotate(-this.speed/this.rotatebreak);if((this.targetangle-this.angle+360)%360<180){this.angle=this.targetangle}}}else{var distance=this.speed/this.ui.speedmod;distance=distance*Math.pow(this.size,-0.1)
this.traveledlast=distance
this.traveled+=distance;this.health-=distance;var step=Math.floor(this.traveled);if(step>=this.path.length-1){step=this.path.length-1;this.x=this.path[step][0];this.y=this.path[step][1];this.eat(this.target)}else{if(this.path[step]){this.x=this.path[step][0];this.y=this.path[step][1]}else{console.log("Target has disappeared");this.looseTarget()}}}}
getsouroundings(entities){var surroundings=[];for(var e=0;e<entities.length;e++){entity=entities[e];if(entity.x>this.x-this.searchradius&&entity.x<this.x+this.searchradius&&entity.y>this.y-this.searchradius&&entity.y<this.y+this.searchradius){surroundings+=entity}}}
searchfood(){var possiblefood=new Array();for(var e=0;e<this.ui.foods.length;e++){var food=this.ui.foods[e];if(food.constructor.name=="Food"){var distance=this.distanceTo(food);if(distance<=this.searchradius){possiblefood.push([distance,e])}}}
if(possiblefood.length>0){var e=possiblefood.sort(function(a,b){if(a[0]===b[0]){return 0}
else{return(a[0]<b[0])?-1:1}})[0][1]
food=this.ui.foods[e];this.target=food}else{var p=this.randompos(this.x,this.y,50);this.target={"x":p[0],"y":p[1],"health":1}}}
divide(){this.size=Math.floor(this.size/2);var clone=Object.assign(new Microbe(this.ui),this)
clone.mutate()
this.ui.microbes.push(clone);this.ui.checkAchievements()}
die(){this.dying=this.dyinglength
this.ui.checkAchievements()}
eat(food){food.health=0;this.looseTarget();if(food.constructor.name!="Food"){return}
this.health=this.fullhealth;this.size+=1;if(this.size>this.maxsize&&this.size/2>this.minsize){this.divide()}}
looseTarget(){this.target=0
this.path=[]
this.traveled=0;this.targetangle=0}
tick(){if(this.dying){this.dying--;this.color=[85,85,85];if(this.dying%5==0){this.y++}
if(this.dying<=0){return!1}
return!0}
this.health--;if(this.health<=0){if(this.size>this.minsize){this.size--;this.health=Math.floor(this.fullhealth/2)}else{this.die()}}
if(this.wait>0){this.wait--;return!0}
if(this.target){if(this.target.health>0){this.travel()}else{this.looseTarget()}}else{this.searchfood()}
return!0}
randompos(nearx=null,neary=null,near=0){var p=super.randompos(nearx,neary,near);var x=p[0];var y=p[1]
if(x<0){x=0}
if(x>=this.ui.canvas.width){x=this.ui.canvas.width-1}
if(y>=this.ui.canvas.height){y=this.ui.canvas.height-1}
if(y<0){y=0}
return[x,y]}};"use strict";class Microbes{constructor(id){this.debug=!1;this.numMicrobes=4;this.foodmod=500
this.feedvol=5;this.manualfed=0;this.autofed=0;this.feedspread=5;this.tps=100;this.debugvar=null;this.speedmod=50;this.counter;this.deaths=0;this.frameskip=1;this.width=0;this.height=0;this.achievements=new Array();this.achievementQ=new Array();this.achievementElement;this.achievementElementName;this.achievementElementBlurb;this.achievementDisplaytime=0;this.menuAchievementsElement;var ui=this;this.container=document.getElementById(id);var html="";html+='<div class="menutrigger">⚙</div>';html+='<div class="menu">';html+="<h3>Autofeed</h3>";html+='<label>less food</label><label>more food</label><input type="range" min="-250" max="500" class="slider reversed" id="foodmodslider" data-variable="foodmod"><div class="reset" data-target="foodmodslider">⟲</div>';html+='<h2>Achievements</h2>';html+='<div class="achievements"></div>';html+='<div class="stats"></div>';html+='</div>';html+='<canvas id="microbes">';html+='Your browser does not support the canvas element.';html+='</canvas>';html+='<div id="achievement">';html+='<div class="title">Achievement unlocked</div>';html+='<div class="name">null</div>';html+='<div class="blurb">null</div>';html+='</div>';this.container.innerHTML=html;var inputs=this.container.querySelectorAll("input");for(var i=0;i<inputs.length;i++){var element=inputs[i];element.value=this[element.getAttribute('data-variable')];element.setAttribute("data-default",element.value);element.addEventListener("change",function(e){element=e.originalTarget;var variable=element.getAttribute('data-variable');ui[variable]=parseInt(element.value)})}
var resets=this.container.querySelectorAll(".reset");for(i=0;i<resets.length;i++){element=resets[i];element.addEventListener("click",function(e){element=e.originalTarget;var target=element.getAttribute('data-target');target=ui.container.querySelector("#"+target);var defaultvalue=parseInt(target.getAttribute("data-default"));target.value=defaultvalue;var variable=target.getAttribute('data-variable');ui[variable]=defaultvalue})}
this.container.classList.add("microbescontainer");this.canvas=this.container.querySelector("canvas");this.stats=this.container.querySelector(".stats");var menutrigger=this.container.querySelector(".menutrigger");this.ctx=this.canvas.getContext("2d");this.microbes=[];this.foods=[];this.counter=0;this.canvas.addEventListener("mousedown",function(event){for(var i=0;i<ui.feedvol;i++){console.log(event);var food=new Food(ui);var p=food.randompos(event.layerX,event.layerY,ui.feedspread);food.x=p[0];food.y=p[1];ui.foods.push(food);ui.manualfed++}});menutrigger.addEventListener("click",function(e){ui.container.classList.toggle("menushown")});this.setupAchievements()}
save(){if(typeof(Storage)!=="undefined"){console.log("Saving is enabled")}else{console.log("Your browser doesn't support save/load")}}
setupAchievements(){var ui=this;this.achievementElement=this.container.querySelector("#achievement");this.achievementElementName=this.achievementElement.querySelector(".name");this.achievementElementBlurb=this.achievementElement.querySelector(".blurb");this.menuAchievementsElement=this.container.querySelector(".achievements");this.achievements.push("Microbes");this.achievements.push(new Achievement(this,"Cell Division","Out of one make two.",function(){return ui.microbes.length>ui.numMicrobes}));this.achievements.push(new Achievement(this,"Get 10 microbes at the same time","It's starting to look like a party.",function(){return ui.microbes.length>=10}));this.achievements.push(new Achievement(this,"Get 100 microbes at the same time","",function(){return ui.microbes.length>=100}));this.achievements.push(new Achievement(this,"Get 200 microbes at the same time","",function(){return ui.microbes.length>=200}));this.achievements.push(new Achievement(this,"Get 300 microbes at the same time","",function(){return ui.microbes.length>=300}));this.achievements.push(new Achievement(this,"Get 500 microbes at the same time","",function(){return ui.microbes.length>=500}));this.achievements.push(new Achievement(this,"Get 1000 microbes at the same time","This is too many.",function(){return ui.microbes.length>=1000}));this.achievements.push("Feeding");this.achievements.push(new Achievement(this,"Feed 100 times","Fed microbes are happy microbes",function(){return ui.manualfed>=100}));this.achievements.push(new Achievement(this,"Have a 100 items of Food","Food is the most important meal of the day",function(){return ui.foods.length>=100}));this.achievements.push(new Achievement(this,"Have a 1000 items of Food","A Feast!",function(){return ui.foods.length>=1000}));this.achievements.push("Deaths");this.achievements.push(new Achievement(this,"First Death","Rest in peace, little buddy! :(",function(){return ui.deaths>=1}));this.achievements.push(new Achievement(this,"10 Deaths","It hurts a little less each time",function(){return ui.deaths>=10}));this.achievements.push(new Achievement(this,"100 Deaths","Tja",function(){return ui.deaths>=100}));this.achievements.push(new Achievement(this,"1000 Deaths","Die you stupid circles!",function(){return ui.deaths>=1000}));this.achievements.push(new Achievement(this,"10000 Deaths","You're a monster!",function(){return ui.deaths>=10000}));this.checkAchievements();this.displayAchievements();this.menuAchievements()}
checkAchievements(){for(var i=0;i<this.achievements.length;i++){if(this.achievements[i].constructor.name=="Achievement"){var result=this.achievements[i].check()}}}
displayAchievements(){if(this.achievementDisplaytime>0){this.achievementDisplaytime--;if(this.achievementDisplaytime<1){this.achievementElement.classList.remove("visible")}
return!1}
var a=this.achievementQ[0];if(a){this.achievementElementName.innerHTML=a.name;this.achievementElementBlurb.innerHTML=a.blurb;this.achievementElement.classList.add("visible");this.achievementDisplaytime=5;this.achievementQ.shift();this.menuAchievements()}}
menuAchievements(){var allhtml="";for(var i=0;i<this.achievements.length;i++){var a=this.achievements[i];var html="";if(a.constructor.name=="Achievement"){var done="";if(a.done){done="done"}
html+='<div class="menuAchievement '+done+'">';html+='<div class="menuAchievementName">'+a.name+'</div>';html+='</div>'}else{html='<div class="menuAchievementsTitle">'+a+'</div>'}
allhtml+=html}
this.menuAchievementsElement.innerHTML=allhtml}
draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);for(var e in this.foods){this.foods[e].draw()}
for(var e in this.microbes){this.microbes[e].draw()}}
updateCanvas(){var newWidth=this.container.offsetWidth;var newHeight=this.container.offsetHeight
if(this.width!=newWidth||this.height!=newHeight){this.canvas.width=newWidth;this.canvas.height=newHeight;this.width=newWidth;this.height=newHeight}}
drawstats(fps,counter,ticks,maxspeedstats){var html="";html+=this.statline("fps",fps);html+=this.statline("ticks",counter);html+=this.statline("ticks/s",ticks);html+=this.statline("foods",this.foods.length);html+=this.statline("Food Chance",this.foodchance());if(this.debugvar!==null){html+=this.statline("debugvar",debugvar)}
html+=this.statline("alive",this.microbes.length);html+=this.statline("deaths",this.deaths);html+=this.statline("total",this.deaths+this.microbes.length);html+=this.statlineMinMax(this.microbes,"generation");html+=this.statlineMinMax(this.microbes,"mutations");html+=this.statlineMinMax(this.microbes,"fullhealth");html+=this.statlineMinMax(this.microbes,"size");html+=this.statlineMinMax(this.microbes,"minsize");html+=this.statlineMinMax(this.microbes,"maxsize");html+=this.statlineMinMax(this.microbes,"speed");html+=this.statlineMinMax(this.microbes,"mutatechance");html+=this.statlineMinMax(this.microbes,"mutaterange");html+=this.statlineMinMax(this.microbes,"traveledlast");html+=this.statlineMinMax(this.microbes,"rotatebreak");html+=this.statlineMinMax(this.microbes,"searchradius");this.stats.innerHTML=html}
statline(key,val){return key+": "+val+"<br>"}
statlineMinMax(obj,key){var min=0;var max=0;var sorted=obj.sort(function(a,b){var av=a[key];var bv=b[key];if(av<bv)return-1;if(av>bv)return 1;return 0});if(sorted[0]){min=sorted[0][key];max=sorted[sorted.length-1][key]}
return key+": min="+min+";max="+max+"<br>"}
tick(counter){for(var e in this.microbes){if(!this.microbes[e].tick()){this.deaths+=1;this.microbes.splice(e,1)}}
for(var e in this.foods){if(!this.foods[e].tick()){this.foods.splice(e,1)}}
if(counter%this.foodchance()==0&&this.manualfed>0){this.foods.push(new Food(this));this.autofed++}}
foodchance(){var res=this.microbes.length;res+=this.foods.length/2
res+=this.foodmod;if(res<1){res=1}
return Math.floor(res)}
play(){this.updateCanvas();this.draw();for(var i=0;i<this.numMicrobes;i++){var microbe=new Microbe(this);if(microbe.defaultcolors[i]){microbe.color=microbe.defaultcolors[i]
microbe.health=999999999999}
this.microbes.push(microbe)}
this.microbes[0].x=Math.floor(this.width/2);this.microbes[0].y=Math.floor(this.height/2);var fps=0;var start=new Date().getTime();var od=start
var osec=start
var atps=this.tps;var ticks=0;var savetimer=0;var work=0;var ui=this
loop();graphicsloop();function loop(){var d=new Date().getTime();target=(d-od)*(atps/1000);work+=target%1
var target=Math.floor(target)
if(target>atps){target=atps}
if(work>=1){target=target+work
target=Math.floor(target)
work-=1}
for(i=0;i<target;i++){ui.counter++;ticks++;ui.tick(ui.counter);if(i>atps){work+=target-i;console.log("target overflow");break}}
od=d;if(savetimer+10000<=d){savetimer=d;ui.save()}
if(osec+1000<=d){atps=ui.tps
osec=d;ui.drawstats(fps,ui.counter,ticks);fps=0;ticks=0;ui.displayAchievements();ui.updateCanvas()}
setTimeout(loop,10)}
function graphicsloop(){var d=new Date().getTime();if(osec+1000<=d){ui.updateCanvas()}
ui.draw();fps+=1;requestAnimationFrame(graphicsloop)}}
masterrace(){i=new Microbe(this);i.speed=1000;i.searchradius=1000;this.microbes[0]=i;return i}}